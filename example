package main

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"strings"
	"time"
)

const (
	birdSocket = "/run/bird/bird.ctl"
	timeout    = 10 * time.Second
)

type BGPHop struct {
	NextHop string
	ASPath  []string
}

type Route struct {
	Prefix string
	Hops   []BGPHop
}

func main() {
	conn, err := net.DialTimeout("unix", birdSocket, timeout)
	if err != nil {
		fmt.Printf("Error connecting to BIRD socket: %v\n", err)
		os.Exit(1)
	}
	defer conn.Close()

	conn.SetDeadline(time.Now().Add(timeout))

	reader := bufio.NewReader(conn)
	writer := bufio.NewWriter(conn)

	// Read the welcome message
	welcome, err := reader.ReadString('\n')
	if err != nil {
		fmt.Printf("Error reading welcome message: %v\n", err)
		os.Exit(1)
	}
	fmt.Print("Welcome message: ", welcome)

	// Send command to show routes
	_, err = writer.WriteString("show route all\n")
	if err != nil {
		fmt.Printf("Error writing to BIRD socket: %v\n", err)
		os.Exit(1)
	}
	writer.Flush()

	routes := make(map[string]*Route)
	var currentRoute *Route
	var currentHop *BGPHop

	for {
		line, err := reader.ReadString('\n')
		if err != nil {
			break
		}
		line = strings.TrimSpace(line)

		if strings.HasPrefix(line, "0000") {
			break // End of data
		}

		if strings.Contains(line, "/") { // This is a new route
			fields := strings.Fields(line)
			prefix := fields[0]
			if route, exists := routes[prefix]; exists {
				currentRoute = route
			} else {
				currentRoute = &Route{Prefix: prefix}
				routes[prefix] = currentRoute
			}
			currentHop = &BGPHop{}
		} else if strings.Contains(line, "via") {
			fields := strings.Fields(line)
			currentHop = &BGPHop{NextHop: fields[1]}
			currentRoute.Hops = append(currentRoute.Hops, *currentHop)
		} else if strings.Contains(line, "BGP.as_path:") {
			asPath := strings.TrimPrefix(line, "BGP.as_path:")
			currentHop.ASPath = strings.Fields(asPath)
		}
	}

	// Print routes by AS
	asPrefixMap := make(map[string][]string)
	for _, route := range routes {
		for _, hop := range route.Hops {
			if len(hop.ASPath) > 0 {
				lastAS := hop.ASPath[len(hop.ASPath)-1]
				asPrefixMap[lastAS] = append(asPrefixMap[lastAS], route.Prefix)
			}
		}
	}

	for as, prefixes := range asPrefixMap {
		fmt.Printf("AS%s:\n", as)
		for _, prefix := range prefixes {
			fmt.Printf("  %s\n", prefix)
			route := routes[prefix]
			for _, hop := range route.Hops {
				fmt.Printf("    via %s (AS path: %s)\n", hop.NextHop, strings.Join(hop.ASPath, " "))
			}
		}
		fmt.Println()
	}
}
